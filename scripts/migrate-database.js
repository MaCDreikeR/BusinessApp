#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ BusinessApp - Migra√ß√£o Completa do Banco de Dados');
console.log('====================================================\n');

const PROJECT_REF = 'oxakpxowhsldczxxtapi';
const BACKUP_DIR = './supabase/backups';
const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];

function runCommand(command, description, allowError = false) {
  try {
    console.log(`üìã ${description}...`);
    const result = execSync(command, { stdio: 'pipe', encoding: 'utf8' });
    console.log(`‚úÖ ${description} - Conclu√≠do!\n`);
    return result;
  } catch (error) {
    if (allowError) {
      console.log(`‚ö†Ô∏è  ${description} - Aviso: ${error.message.split('\n')[0]}\n`);
      return null;
    }
    console.error(`‚ùå Erro ao executar: ${description}`);
    console.error(`Comando: ${command}`);
    console.error(`Erro: ${error.message}\n`);
    throw error;
  }
}

function ensureBackupDir() {
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
    console.log(`üìÅ Diret√≥rio de backup criado: ${BACKUP_DIR}\n`);
  }
}

async function main() {
  try {
    console.log('üîç Verificando pr√©-requisitos...\n');

    // Verificar se est√° linkado ao projeto
    try {
      const projects = execSync('supabase projects list', { encoding: 'utf8' });
      if (!projects.includes(PROJECT_REF)) {
        throw new Error('Projeto n√£o encontrado');
      }
      console.log('‚úÖ Projeto encontrado no Supabase');
    } catch (error) {
      console.log('üîó Fazendo link com o projeto remoto...');
      runCommand(`supabase link --project-ref ${PROJECT_REF}`, 'Linkando projeto');
    }

    // Criar diret√≥rio de backup
    ensureBackupDir();

    console.log('üì¶ ETAPA 1: Backup Completo do Banco Remoto\n');
    
    // Fazer backup completo (esquema + dados) do projeto linkado
    const backupFile = path.join(BACKUP_DIR, `backup-completo-${timestamp}.sql`);
    runCommand(
      `supabase db dump --linked -f "${backupFile}"`,
      'Fazendo backup completo do banco remoto'
    );

    console.log('üè† ETAPA 2: Preparando Ambiente Local\n');
    
    // Verificar se Docker est√° rodando
    try {
      runCommand('docker ps', 'Verificando Docker');
    } catch (error) {
      console.log('‚ùå Docker n√£o est√° rodando.');
      console.log('üëâ Por favor, inicie o Docker Desktop e tente novamente.');
      console.log('   Ou execute: npm run supabase:start');
      process.exit(1);
    }

    // Parar Supabase local se estiver rodando
    runCommand('supabase stop', 'Parando Supabase local', true);

    // Iniciar Supabase local
    runCommand('supabase start', 'Iniciando Supabase local');

    console.log('üì• ETAPA 3: Aplicando Backup no Ambiente Local\n');

    // Resetar banco local completamente
    runCommand('supabase db reset', 'Resetando banco local');

    // Aplicar backup no banco local
    runCommand(
      `supabase db push --local --file "${backupFile}"`,
      'Aplicando backup no banco local',
      true // Permitir erro pois o comando pode n√£o existir
    );

    // M√©todo alternativo se o comando acima n√£o funcionar
    try {
      const localDbUrl = 'postgresql://postgres:postgres@127.0.0.1:54322/postgres';
      
      // Tentar usar o docker para aplicar o SQL
      runCommand(
        `docker exec supabase_db_BusinessApp psql -U postgres -d postgres -f /tmp/backup.sql`,
        'Aplicando backup via Docker (m√©todo alternativo)',
        true
      );
    } catch (error) {
      console.log('‚ö†Ô∏è  M√©todo Docker tamb√©m falhou. Tentando aplica√ß√£o manual...');
      
      // √öltimo recurso: mostrar instru√ß√µes manuais
      console.log('\nüìã INSTRU√á√ïES MANUAIS:');
      console.log('======================');
      console.log('1. Acesse o Supabase Studio local: http://127.0.0.1:54323');
      console.log('2. V√° para "SQL Editor"');
      console.log(`3. Copie o conte√∫do do arquivo: ${backupFile}`);
      console.log('4. Cole no editor SQL e execute');
      console.log('\nOu use um cliente PostgreSQL externo:');
      console.log('- Host: 127.0.0.1');
      console.log('- Port: 54322');
      console.log('- Database: postgres');
      console.log('- Username: postgres');
      console.log('- Password: postgres');
    }

    console.log('ÔøΩ ETAPA 4: Verifica√ß√£o da Migra√ß√£o\n');

    // Verificar status do Supabase local
    const status = runCommand('supabase status', 'Verificando status do Supabase local');
    console.log(status);

    console.log('üéâ PROCESSO DE MIGRA√á√ÉO INICIADO!\n');
    console.log('üìã Pr√≥ximos passos:');
    console.log('===================');
    console.log('1. üöÄ Acesse o Supabase Studio local: http://127.0.0.1:54323');
    console.log('2. üìä Verifique se os dados foram importados corretamente');
    console.log('3. üß™ Configure sua aplica√ß√£o para usar o ambiente local');
    console.log('4. üìß Acesse emails de teste: http://127.0.0.1:54324');
    console.log('');
    console.log(`üìÅ Backup salvo em: ${backupFile}`);
    console.log('');
    console.log('üîß Configura√ß√£o do app para ambiente local:');
    console.log('   - Use as vari√°veis do arquivo .env.development');
    console.log('   - URL local: http://127.0.0.1:54321');
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANTE: Se a importa√ß√£o autom√°tica falhou,');
    console.log('   use as instru√ß√µes manuais mostradas acima.');

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error.message);
    console.error('\nüîß Poss√≠veis solu√ß√µes:');
    console.error('1. Verifique se o Docker Desktop est√° rodando');
    console.error('2. Verifique sua conex√£o com a internet');
    console.error('3. Fa√ßa login novamente: supabase login');
    console.error('4. Execute manualmente: npm run supabase:start');
    process.exit(1);
  }
}

main().catch(console.error);